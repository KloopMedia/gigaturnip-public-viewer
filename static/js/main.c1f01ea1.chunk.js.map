{"version":3,"sources":["config/Urls.js","util/Axios.js","util/Firebase.js","components/custom-widgets/file-widget/CustomFileWidget.tsx","util/Util.tsx","components/custom-widgets/autocomplete/AutoCompleteWidget.tsx","components/custom-widgets/fixed-radio-widget/FixedRadioWidget.tsx","components/custom-widgets/link-widget/CustomLinkWidget.tsx","components/tasks/QuickTaskContent.tsx","components/tasks/QuickTask.tsx","components/tasks/TaskList.tsx","components/tasks/TaskFilter.tsx","components/tasks/TaskMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["taskstagesUrl","tasksUrl","instance","axios","create","baseURL","interceptors","request","use","config","localStorage","getItem","error","Promise","reject","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","GoogleAuthProvider","firestore","settings","ignoreUndefinedProperties","CustomFileWidget","props","schema","value","useState","uploadedFiles","setUploadedFiles","currentFile","setCurrentFile","isImageOpen","setIsImageOpen","isVideoOpen","setIsVideoOpen","fileType","setFileType","parsedValue","setParsedValue","useEffect","Object","keys","length","console","log","parsed","JSON","parse","forEach","filename","getDownloadUrl","then","url","prevState","status","path","storage","ref","getDownloadURL","handleFileClick","a","child","getMetadata","metadata","type","contentType","split","window","open","closeViewer","src","disableScroll","backgroundStyle","backgroundColor","closeOnClickOutside","onClose","Dialog","fullWidth","height","controls","className","title","map","i","style","display","alignItems","onClick","fontSize","padding","margin","WIDGETS","customfile","autocomplete","id","placeholder","required","readonly","disabled","label","onChange","onBlur","onFocus","autofocus","options","rawErrors","searchField","responseField","params","examples","setExamples","updateExamples","webhook","get","res","data","results","catch","err","inputType","Form","Group","Label","Control","autoFocus","readOnly","list","target","emptyValue","example","index","RadioWidget","enumOptions","enumDisabled","_onChange","_onBlur","_onFocus","inline","Boolean","option","itemDisabled","Array","isArray","indexOf","checked","Check","name","customlink","href","paginatedDataHandler","setDataFunction","setCountFunction","count","numOfPages","Math","ceil","createPaginationURL","page","getSelectableTasks","campaignId","filter","query","stage","QuickTaskContent","taskData","isAssigned","setSchema","uiSchema","setUiSchema","formResponses","setFormResponses","setComplete","prevTasks","setPrevTasks","widgets","setData","task","parsed_schema","json_schema","parsed_ui","ui_schema","prev","displayed_prev_tasks","previousTasks","responses","complete","Grid","container","direction","spacing","item","sm","xs","sx","formData","children","liveOmit","omitExtraData","ExpandMore","styled","expand","other","IconButton","theme","transform","marginLeft","transition","transitions","duration","shortest","QuickTask","creatable","refreshTasks","integrated","excluded","handleAction","expanded","setExpanded","setAssigned","Card","CardHeader","action","Stack","py","px","background","subheader","titleTypographyProps","variant","subheaderTypographyProps","Collapse","in","timeout","unmountOnExit","CardContent","handleAssignment","TaskList","selectable","tasks","expandAll","setExpandAll","justifyContent","Button","toString","description","p","width","TaskFilter","campaign","onFilter","chainId","stageId","setStageId","stages","setStages","searchValue","setSearchValue","Axios","FormGroup","Box","m","minWidth","TextField","event","FormControl","InputLabel","Select","labelId","MenuItem","mx","mb","TaskMenu","selectableTasks","setSelectableTasks","totalPages","setTotalPages","React","setPage","filterData","setFilterData","pb","alert","Pagination","showFirstButton","showLastButton","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1f01ea1.chunk.js","sourcesContent":["const baseUrl = \"https://journal-bb5e3.uc.r.appspot.com/\"\r\n// const baseUrl = \"http://127.0.0.1:8000/\"\r\nconst campaignsUrl = \"api/v1/campaigns/\"\r\nconst chainsUrl = \"api/v1/chains/\"\r\nconst taskstagesUrl = \"api/v1/taskstages/\"\r\nconst webhookstagesUrl = \"api/v1/webhookstages/\"\r\nconst conditionalstagesUrl = \"api/v1/conditionalstages/\"\r\nconst casesUrl = \"api/v1/cases/\"\r\nconst tasksUrl = \"api/v1/tasks/\"\r\nconst notificationsUrl = \"/api/v1/notifications/\"\r\n\r\nexport {\r\n    baseUrl,\r\n    campaignsUrl,\r\n    chainsUrl,\r\n    taskstagesUrl,\r\n    webhookstagesUrl,\r\n    conditionalstagesUrl,\r\n    casesUrl,\r\n    tasksUrl,\r\n    notificationsUrl\r\n}","import axios from \"axios\";\r\nimport {baseUrl} from \"../config/Urls\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: baseUrl\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n    function (config) {\r\n        const token = localStorage.getItem(\"token\");\r\n        // if (token) {\r\n        //     config.headers[\"Authorization\"] = 'JWT ' + token;\r\n        // }\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default instance;","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCXiwOUNsbzKH7sbSAZrqA9f7VOeCMdUOQ\",\r\n    authDomain: \"gigaturnip-b6b5b.firebaseapp.com\",\r\n    projectId: \"gigaturnip-b6b5b\",\r\n    storageBucket: \"gigaturnip-b6b5b.appspot.com\",\r\n    messagingSenderId: \"414429242328\",\r\n    appId: \"1:414429242328:web:a4685f5ac6895ea767c8ad\",\r\n    measurementId: \"G-Y8JTEJMTET\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n// const db = firebase.firestore();\r\n// if (window.location.hostname === \"localhost\") {\r\n//   db.useEmulator(\"localhost\", 8080);\r\n// }\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nfirebase.firestore().settings({\r\n    ignoreUndefinedProperties: true,\r\n})\r\nexport const signInWithGoogle = () => {\r\n    provider.setCustomParameters({\r\n        prompt: 'select_account'\r\n    });\r\n    return firebase.auth().signInWithPopup(provider);\r\n};\r\n\r\nexport const signOut = () => {\r\n    return firebase.auth().signOut()\r\n        .then(() => localStorage.removeItem(\"token\"))\r\n        .then(() => window.location.reload())\r\n}\r\n\r\nexport default firebase;","import React, {useEffect, useState} from 'react'\r\nimport firebase from '../../../util/Firebase'\r\nimport ImageViewer from 'react-simple-image-viewer';\r\nimport {Dialog} from \"@mui/material\";\r\n\r\n\r\nconst CustomFileWidget = (props: any) => {\r\n    const {schema, value} = props;\r\n    const [uploadedFiles, setUploadedFiles] = useState<any>({})\r\n    const [currentFile, setCurrentFile] = useState(\"\")\r\n    const [isImageOpen, setIsImageOpen] = useState(false);\r\n    const [isVideoOpen, setIsVideoOpen] = useState(false);\r\n    const [fileType, setFileType] = useState(\"\")\r\n    const [parsedValue, setParsedValue] = useState<any>({})\r\n\r\n    useEffect(() => {\r\n        if (value && Object.keys(value).length > 0) {\r\n            console.log(\"value\", value)\r\n            const parsed = JSON.parse(value)\r\n            setParsedValue(parsed)\r\n            Object.keys(parsed).forEach(filename => {\r\n                getDownloadUrl(parsed[filename])\r\n                    .then(url => setUploadedFiles((prevState: any) => ({\r\n                        ...prevState,\r\n                        [filename]: {url: url, status: \"complete\"}\r\n                    })))\r\n            })\r\n        }\r\n    }, [value])\r\n\r\n    const getDownloadUrl = (path: string) => {\r\n        return firebase.storage().ref(path).getDownloadURL()\r\n    }\r\n\r\n    const handleFileClick = async (filename: string) => {\r\n        const parsed = parsedValue;\r\n        console.log(\"FILE CLICK VALUE\", parsed)\r\n        if (filename in parsed) {\r\n            const path = parsed[filename];\r\n            console.log(path)\r\n            const metadata = await firebase.storage().ref().child(path).getMetadata()\r\n            const type = metadata.contentType.split(\"/\")[0]\r\n            console.log(\"FILE TYPE\", type)\r\n            switch (type) {\r\n                case \"image\":\r\n                    setCurrentFile(uploadedFiles[filename].url);\r\n                    setFileType(metadata.contentType);\r\n                    setIsImageOpen(true);\r\n                    break;\r\n                case \"video\":\r\n                    setCurrentFile(uploadedFiles[filename].url);\r\n                    setFileType(metadata.contentType);\r\n                    setIsVideoOpen(true);\r\n                    break;\r\n                default:\r\n                    window.open(uploadedFiles[filename].url, '_blank');\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeViewer = () => {\r\n        setCurrentFile(\"\")\r\n        setFileType(\"\");\r\n        setIsImageOpen(false);\r\n        setIsVideoOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isImageOpen && <ImageViewer\r\n                src={[currentFile]}\r\n                disableScroll={false}\r\n                backgroundStyle={{\r\n                    backgroundColor: \"rgba(0,0,0,0.8)\"\r\n                }}\r\n                closeOnClickOutside={true}\r\n                onClose={closeViewer}\r\n            />}\r\n            <Dialog\r\n                open={isVideoOpen}\r\n                onClose={closeViewer}\r\n                fullWidth={true}\r\n            >\r\n                <video height=\"360px\" controls>\r\n                    <source src={currentFile} type={fileType}/>\r\n                    Your browser does not support the video tag.\r\n                </video>\r\n            </Dialog>\r\n\r\n            <label className={\"form-label\"}>{schema?.title}</label>\r\n            <br/>\r\n\r\n            {Object.keys(uploadedFiles).map((filename, i) =>\r\n                <div key={filename}>\r\n                    <div style={{display: \"flex\", alignItems: \"baseline\"}}>\r\n                        <p>{filename}</p>\r\n                        {uploadedFiles[filename].status === 'complete' &&\r\n                        <div style={{display: \"flex\", alignItems: \"baseline\"}}>\r\n                            <button\r\n                                onClick={() => handleFileClick(filename)}\r\n                                style={{fontSize: \"14px\", padding: 0, margin: \"0 10px\"}}\r\n                                type=\"button\"\r\n                                className=\"btn btn-link text-success\"\r\n                            >\r\n                                посмотреть файл\r\n                            </button>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomFileWidget","import axios from \"./Axios\";\r\nimport {campaignsUrl, notificationsUrl, taskstagesUrl, tasksUrl} from \"../config/Urls\";\r\nimport CustomFileWidget from \"../components/custom-widgets/file-widget/CustomFileWidget\";\r\nimport AutoCompleteWidget from \"../components/custom-widgets/autocomplete/AutoCompleteWidget\";\r\nimport FixedRadioWidget from \"../components/custom-widgets/fixed-radio-widget/FixedRadioWidget\";\r\nimport CustomLinkWidget from \"../components/custom-widgets/link-widget/CustomLinkWidget\";\r\n\r\nexport const IS_PAGINATION_ON = false\r\nexport const WIDGETS = {\r\n    customfile: CustomFileWidget,\r\n    autocomplete: AutoCompleteWidget,\r\n    RadioWidget: FixedRadioWidget,\r\n    customlink: CustomLinkWidget\r\n};\r\n\r\n// Pagination Functions\r\nexport const paginatedDataHandler = (\r\n    data: any,\r\n    setDataFunction: (res: any) => void,\r\n    setCountFunction: (count: number) => void,\r\n) => {\r\n    const {results, count} = data;\r\n    const numOfPages = Math.ceil(count / 10)\r\n    console.log(\"numOfPages\", numOfPages)\r\n    console.log(\"results\", results)\r\n    setDataFunction(results)\r\n    setCountFunction(numOfPages)\r\n}\r\n\r\nconst createPaginationURL = (request: string, page?: number) => {\r\n    if (page && page > 0) {\r\n        return `${request}?limit=10&offset=${(page - 1) * 10}`\r\n    } else {\r\n        return request\r\n    }\r\n}\r\n\r\n// Date Functions\r\nexport const formatDateString = (date: string) => {\r\n    const d = new Date(date)\r\n    const year = d.getFullYear()\r\n    const month = addZeroesToDate(d.getMonth() + 1)\r\n    const day = addZeroesToDate(d.getDate())\r\n    const hours = addZeroesToDate(d.getHours())\r\n    const minutes = addZeroesToDate(d.getMinutes())\r\n    const seconds = addZeroesToDate(d.getSeconds())\r\n    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`\r\n}\r\n\r\nconst addZeroesToDate = (date: number) => {\r\n    return date < 10 ? '0' + date : date\r\n}\r\n\r\n// Tab function\r\nexport const a11yProps = (index: any) => ({\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n});\r\n\r\n// Campaigns Functions\r\nexport const getCampaigns = () => {\r\n    return axios.get(campaignsUrl)\r\n        .then(res => res.data)\r\n        .then(res => {\r\n            console.log(res)\r\n            return IS_PAGINATION_ON ? res.results : res\r\n        })\r\n}\r\n\r\nexport const getUserCampaigns = () => {\r\n    return axios.get(campaignsUrl + 'list_user_campaigns/')\r\n        .then(res => res.data)\r\n        .then(res => {\r\n            console.log(\"user_campaigns\", res)\r\n            return IS_PAGINATION_ON ? res.results : res\r\n        })\r\n}\r\n\r\nexport const getSelectableCampaigns = () => {\r\n    return axios.get(campaignsUrl + 'list_user_selectable/')\r\n        .then(res => res.data)\r\n        .then(res => {\r\n            console.log(\"selectable_campaigns\", res)\r\n            return IS_PAGINATION_ON ? res.results : res\r\n        })\r\n}\r\n\r\nexport const requestCampaignJoin = (id: string | number) => {\r\n    return axios.post(campaignsUrl + id + '/join_campaign/')\r\n}\r\n\r\nexport const requestCampaignInfo = (id: string | number) => {\r\n    return axios.get(campaignsUrl + id + '/')\r\n        .then(res => res.data)\r\n}\r\n\r\n\r\n// TaskCard Functions\r\nexport const requestTaskCreation = (id: string | number) => {\r\n    return axios.post(taskstagesUrl + id + '/create_task/')\r\n        .then(res => res.data)\r\n}\r\n\r\nexport const requestTaskAssignment = (id: string | number) => {\r\n    return axios.post(tasksUrl + id + '/request_assignment/')\r\n}\r\n\r\n\r\n// TaskMenu Functions\r\nexport const getSelectableTasks = (campaignId: string | number, page?: number, filter?: {query?: string, stage?: string} | null) => {\r\n    console.log(page)\r\n    let url = createPaginationURL(`${tasksUrl}public/`, page) + '&ordering=created_at'\r\n    if (filter) {\r\n        if (filter.query) {\r\n            url += `&search=${filter.query}`\r\n        }\r\n        if (filter.stage) {\r\n            url += `&stage=${filter.stage}`\r\n        }\r\n        // url = `${tasksUrl}?task_responses=${filter.query}`\r\n    }\r\n    console.log(\"SELECTABLE URL\", url)\r\n    return axios.get(url).then(res => {\r\n        console.log(\"getSelectableTasks\", res.data)\r\n        return res.data;\r\n    })\r\n};\r\n\r\nexport const getCompleteTasks = (campaignId: string | number) => {\r\n    return axios.get(`${tasksUrl}user_relevant/?complete=${true}&stage__chain__campaign=${campaignId}`)\r\n        .then(res => res.data)\r\n        .then(res => {\r\n            console.log(\"getCompleteTasks\", res)\r\n            return (res)\r\n        })\r\n};\r\n\r\nexport const getOpenTasks = (campaignId: string | number) => {\r\n    return axios.get(`${tasksUrl}user_relevant/?complete=${false}&stage__chain__campaign=${campaignId}`)\r\n        .then(res => res.data)\r\n        .then(res => {\r\n            console.log(\"getOpenTasks\", res)\r\n            return (res)\r\n        })\r\n};\r\n\r\nexport const getCreatableTasks = (campaignId: string | number) => {\r\n    return axios.get(`${taskstagesUrl}user_relevant/?chain__campaign=${campaignId}`)\r\n        .then(res => res.data)\r\n};\r\n\r\n\r\n// Task Functions\r\nexport const getPreviousTasks = (id: string | number) => {\r\n    return axios.get(`${tasksUrl + id}/list_displayed_previous/`)\r\n        .then(res => res.data)\r\n}\r\n\r\nexport const getTask = (id: string | number) => {\r\n    return axios.get(`${tasksUrl + id}/`).then((res: any) => res.data)\r\n}\r\n\r\n\r\n// Notifications Functions\r\nexport const getUserNotifications = (campaignId: string | number, viewed: boolean, importance?: number, page?: number) => {\r\n    console.log(page)\r\n    const url = createPaginationURL(`${notificationsUrl}list_user_notifications/?campaign=${campaignId}&viewed=${viewed}`, page)\r\n    console.log(\"IMPORTANCE\", importance)\r\n    if (importance === 0) {\r\n        return axios.get(`${url}&importance=${importance}`)\r\n            .then(res => res.data)\r\n    } else {\r\n        return axios.get(url)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const getNotificationContent = (id: string | number) => {\r\n    return axios.get(`${notificationsUrl + id}/`).then(res => res.data)\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport {WidgetProps} from \"@rjsf/core\";\r\nimport axios from \"axios\";\r\n\r\nconst AutoCompleteWidget = (props: WidgetProps) => {\r\n    const {\r\n        id,\r\n        placeholder,\r\n        required,\r\n        readonly,\r\n        disabled,\r\n        label,\r\n        value,\r\n        onChange,\r\n        onBlur,\r\n        onFocus,\r\n        autofocus,\r\n        options,\r\n        schema,\r\n        rawErrors = []\r\n    } = props;\r\n\r\n    const searchField = options.searchField ?? 'search'\r\n    const responseField = options.responseField ?? 'text'\r\n    const params = options?.params ?? ''\r\n\r\n    const [examples, setExamples] = useState<string[]>([])\r\n\r\n    const updateExamples = () => {\r\n        if (options.webhook) {\r\n            const url = `${options.webhook}?${searchField}=${value + params}`\r\n            axios.get(url).then(res => res.data).then(res => setExamples(res.results)).catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    const _onChange = ({\r\n                           target: {value},\r\n                       }: React.ChangeEvent<HTMLInputElement>) => {\r\n        updateExamples()\r\n        return onChange(value === \"\" ? options.emptyValue : value)\r\n    };\r\n    const _onBlur = ({target: {value}}: React.FocusEvent<HTMLInputElement>) =>\r\n        onBlur(id, value);\r\n    const _onFocus = ({\r\n                          target: {value},\r\n                      }: React.FocusEvent<HTMLInputElement>) => onFocus(id, value);\r\n    const inputType = (schema.type) === 'string' ? 'text' : `${schema.type}`\r\n\r\n    return (\r\n        <Form.Group className=\"mb-0\">\r\n            <Form.Label className={rawErrors.length > 0 ? \"text-danger\" : \"\"}>\r\n                {label || schema.title}\r\n                {(label || schema.title) && required ? \"*\" : null}\r\n            </Form.Label>\r\n            <Form.Control\r\n                id={id}\r\n                placeholder={placeholder}\r\n                autoFocus={autofocus}\r\n                required={required}\r\n                disabled={disabled}\r\n                readOnly={readonly}\r\n                className={rawErrors.length > 0 ? \"is-invalid\" : \"\"}\r\n                list={`examples_${id}`}\r\n                type={inputType}\r\n                value={value || value === 0 ? value : \"\"}\r\n                onChange={_onChange}\r\n                onBlur={_onBlur}\r\n                onFocus={_onFocus}\r\n            />\r\n            {examples && examples.length > 0 ? (\r\n                <datalist id={`examples_${id}`}>\r\n                    {(examples as string[])\r\n                        .map((example: any, index) => {\r\n                            return <option key={`${example[responseField as string]}_${index}`} value={example[responseField as string]}/>;\r\n                        })}\r\n                </datalist>\r\n            ) : null}\r\n        </Form.Group>\r\n    );\r\n};\r\n\r\nexport default AutoCompleteWidget;","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport { WidgetProps } from \"@rjsf/core\";\r\n\r\nconst RadioWidget = ({\r\n  id,\r\n  schema,\r\n  options,\r\n  value,\r\n  required,\r\n  disabled,\r\n  readonly,\r\n  label,\r\n  onChange,\r\n  onBlur,\r\n  onFocus,\r\n}: WidgetProps) => {\r\n  const { enumOptions, enumDisabled } = options;\r\n\r\n  const _onChange = ({\r\n    target: { value },\r\n  }: React.ChangeEvent<HTMLInputElement>) =>\r\n    onChange(schema.type == \"boolean\" ? value !== \"false\" : value);\r\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\r\n    onBlur(id, value);\r\n  const _onFocus = ({\r\n    target: { value },\r\n  }: React.FocusEvent<HTMLInputElement>) => onFocus(id, value);\r\n\r\n  const inline = Boolean(options && options.inline);\r\n\r\n  return (\r\n    <Form.Group className=\"mb-0\">\r\n      <Form.Label className=\"d-block\">\r\n        {label || schema.title}\r\n        {(label || schema.title) && required ? \"*\" : null}\r\n      </Form.Label>\r\n      {(enumOptions as any).map((option: any, i: number) => {\r\n        const itemDisabled =\r\n          Array.isArray(enumDisabled) &&\r\n          enumDisabled.indexOf(option.value) !== -1;\r\n        const checked = option.value == value;\r\n\r\n        const radio = (\r\n          <Form.Check\r\n            inline={inline}\r\n            label={option.label}\r\n            id={`${id}_${option.label}`}\r\n            key={i}\r\n            name={id}\r\n            type=\"radio\"\r\n            disabled={disabled || itemDisabled || readonly}\r\n            checked={checked}\r\n            required={required}\r\n            value={option.value}\r\n            onChange={_onChange}\r\n            onBlur={_onBlur}\r\n            onFocus={_onFocus}\r\n          />\r\n        );\r\n        return radio;\r\n      })}\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default RadioWidget;","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport {WidgetProps} from \"@rjsf/core\";\r\n\r\nconst CustomLinkWidget = ({required, label, value, schema, rawErrors = []}: WidgetProps) => {\r\n    return (\r\n        value ? <Form.Group className=\"mb-0\">\r\n                <Form.Label className={rawErrors.length > 0 ? \"text-danger\" : \"\"}>\r\n                    {label || schema.title}\r\n                    {(label || schema.title) && required ? \"*\" : null}\r\n                </Form.Label>\r\n                <br/>\r\n                <a href={value}>{value}</a>\r\n            </Form.Group>\r\n            : null\r\n    );\r\n};\r\n\r\nexport default CustomLinkWidget;","import React, {useEffect, useState} from \"react\";\r\nimport Form from \"@rjsf/bootstrap-4\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Grid} from \"@mui/material\";\r\nimport {getPreviousTasks, WIDGETS} from \"../../util/Util\";\r\n\r\ntype QuickTaskContentParams = { id: string, taskData: any, isAssigned: boolean, handleAssignment: (value: boolean) => void, integrated?: boolean, refreshTasks?: () => void }\r\n\r\nconst QuickTaskContent = (props: QuickTaskContentParams) => {\r\n    const {id, taskData, isAssigned} = props;\r\n\r\n    const [schema, setSchema] = useState({})\r\n    const [uiSchema, setUiSchema] = useState({})\r\n    const [formResponses, setFormResponses] = useState<any>({})\r\n    const [complete, setComplete] = useState(false)\r\n    const [prevTasks, setPrevTasks] = useState<any>([])\r\n\r\n    const widgets = WIDGETS\r\n\r\n    useEffect(() => {\r\n        const setData = async () => {\r\n            const task = taskData\r\n            const stage = task.stage\r\n\r\n            console.log(task)\r\n\r\n            let parsed_schema = stage.json_schema ? JSON.parse(stage.json_schema) : {}\r\n            let parsed_ui = stage.ui_schema ? JSON.parse(stage.ui_schema) : {}\r\n\r\n            const prev: any = task.displayed_prev_tasks ? task.displayed_prev_tasks : []\r\n\r\n            const previousTasks = prev.map((task: any) => ({\r\n                responses: task.responses,\r\n                json_schema: task.stage.json_schema ? JSON.parse(task.stage.json_schema) : {},\r\n                ui_schema: task.stage.ui_schema ? JSON.parse(task.stage.ui_schema) : {}\r\n            }))\r\n\r\n            console.log(\"previousTasks\", previousTasks)\r\n\r\n            setPrevTasks(previousTasks)\r\n            setFormResponses(task.responses)\r\n            setSchema(parsed_schema)\r\n            setUiSchema(parsed_ui)\r\n            setComplete(task.complete)\r\n        }\r\n        if (taskData) {\r\n            setData()\r\n        }\r\n    }, [taskData])\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid direction='row' container spacing={1}>\r\n                {prevTasks?.length > 0 &&\r\n                <Grid container item sm={6} xs={12} sx={{display: 'block'}}>\r\n                    {prevTasks.map((task: any, i: number) =>\r\n                        <Form\r\n                            key={`prev_task_${i}`}\r\n                            schema={task.json_schema ?? {}}\r\n                            uiSchema={task.ui_schema ?? {}}\r\n                            formData={task.responses ?? {}}\r\n                            widgets={widgets}\r\n                            disabled={true}\r\n                            children={\" \"}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                }\r\n                <Grid container item sm={prevTasks?.length > 0 ? 6 : 12} xs={12} sx={{display: 'block'}}>\r\n                    <Form\r\n                        schema={schema ?? {}}\r\n                        uiSchema={uiSchema ?? {}}\r\n                        formData={formResponses ?? {}}\r\n                        liveOmit={true}\r\n                        omitExtraData={true}\r\n                        widgets={widgets}\r\n                        disabled={true}\r\n                    > </Form>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default QuickTaskContent\r\n","import React, {useEffect, useState} from 'react';\r\nimport {styled} from '@mui/material/styles';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton, {IconButtonProps} from '@mui/material/IconButton';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport {QuickTaskProps} from \"../../util/Types\";\r\nimport QuickTaskContent from \"./QuickTaskContent\";\r\nimport {Box, Button, Stack} from \"@mui/material\";\r\nimport {requestTaskAssignment} from \"../../util/Util\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n    expand: boolean;\r\n}\r\n\r\nconst ExpandMore = styled((props: ExpandMoreProps) => {\r\n    const {expand, ...other} = props;\r\n    return <IconButton {...other} />;\r\n})(({theme, expand}) => ({\r\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n    }),\r\n}));\r\n\r\nconst QuickTask = (props: QuickTaskProps) => {\r\n    const {\r\n        id,\r\n        name,\r\n        creatable,\r\n        task,\r\n        expand,\r\n        refreshTasks,\r\n        integrated,\r\n        handleAction,\r\n        excluded\r\n    } = props;\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [isAssigned, setAssigned] = useState(integrated ?? false);\r\n\r\n    useEffect(() => {\r\n        setExpanded(expand)\r\n    }, [expand])\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const handleSelectable = () => {\r\n        requestTaskAssignment(id)\r\n            .then(res => setAssigned(true))\r\n            .catch(err => {\r\n                alert(err)\r\n                if (refreshTasks) {\r\n                    refreshTasks()\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleAssignment = (value: boolean) => {\r\n        setAssigned(value)\r\n    }\r\n\r\n    const isDisabled = () => {\r\n        if (integrated) {\r\n            if (excluded) {\r\n                return false\r\n            } else {\r\n                return true\r\n            }\r\n        } else {\r\n            return isAssigned\r\n        }\r\n    }\r\n\r\n    const handleActionClick = () => {\r\n        if (id && handleAction && excluded !== undefined) {\r\n            handleAction(parseInt(id), excluded)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader\r\n                action={\r\n                    <Stack direction=\"row\" spacing={1}>\r\n                        <ExpandMore\r\n                            expand={expanded}\r\n                            onClick={handleExpandClick}\r\n                            disabled={creatable}\r\n                            aria-expanded={expanded}\r\n                            aria-label=\"show more\"\r\n                        >\r\n                            <ExpandMoreIcon/>\r\n                        </ExpandMore>\r\n                    </Stack>\r\n                }\r\n                sx={{py: 1, px: 2, background: task.complete ? \"lightgrey\" : \"\"}}\r\n                title={name}\r\n                subheader={`ID: ${id}`}\r\n                titleTypographyProps={{variant: \"h6\"}}\r\n                subheaderTypographyProps={{variant: \"caption\"}}\r\n            />\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                    <QuickTaskContent\r\n                        id={id}\r\n                        taskData={task}\r\n                        integrated={integrated}\r\n                        handleAssignment={handleAssignment}\r\n                        isAssigned={isDisabled()}\r\n                        refreshTasks={refreshTasks}/>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default QuickTask\r\n","import React, {useState} from \"react\";\r\nimport {Button, Grid} from \"@mui/material\";\r\nimport QuickTask from \"./QuickTask\";\r\n\r\n\r\ntype TaskListProps = {\r\n    complete?: boolean,\r\n    selectable?: boolean,\r\n    creatable?: boolean,\r\n    tasks: any[],\r\n    refreshTasks?: () => void\r\n}\r\n\r\n\r\nconst TaskList = (props: TaskListProps) => {\r\n    const {complete, selectable, tasks, creatable, refreshTasks} = props;\r\n    const [expandAll, setExpandAll] = useState(false)\r\n\r\n    const listTasks = () => {\r\n        return tasks.map((task: any) => {\r\n                const id = task.id.toString()\r\n                const name = task.stage.name\r\n                const description = task.stage.description\r\n                return (\r\n                    <Grid item key={task.id} sx={{p: 1, width: \"100%\"}}>\r\n                        <QuickTask\r\n                            id={id}\r\n                            name={name}\r\n                            description={description}\r\n                            complete={complete}\r\n                            selectable={selectable}\r\n                            creatable={creatable}\r\n                            task={task}\r\n                            expand={expandAll}\r\n                            refreshTasks={refreshTasks}\r\n                        />\r\n                    </Grid>\r\n                )\r\n            }\r\n        )\r\n    }\r\n\r\n    const handleExpand = () => {\r\n        setExpandAll(!expandAll)\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction={creatable ? \"row\" : \"column\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={creatable ? \"flex-start\" : \"center\"}\r\n        >\r\n            <Button variant={\"contained\"} onClick={handleExpand}>\r\n                {expandAll ? \"Свернуть все\" : \"Развернуть все\"}\r\n            </Button>\r\n            {listTasks()}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default TaskList","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    FormGroup,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    SelectChangeEvent,\r\n    TextField\r\n} from \"@mui/material\";\r\nimport {Form} from \"@rjsf/bootstrap-4\";\r\nimport {chainsUrl, taskstagesUrl} from \"../../config/Urls\";\r\nimport Axios from \"../../util/Axios\";\r\nimport {WIDGETS} from \"../../util/Util\";\r\n\r\nconst TaskFilter = (props: { campaign: string, onFilter: (filter: string, stage: string) => void }) => {\r\n\r\n    const {campaign, onFilter} = props;\r\n\r\n    const [chainId, setChainId] = useState(\"\")\r\n    const [stageId, setStageId] = useState(\"\")\r\n    const [formStageId, setFormStageId] = useState(\"\")\r\n    const [chains, setChains] = useState([])\r\n    const [stages, setStages] = useState([])\r\n    const [jsonSchema, setJsonSchema] = useState({})\r\n    const [uiSchema, setUiSchema] = useState({})\r\n    const [formResponses, setFormResponses] = useState({})\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n\r\n    const widgets = WIDGETS\r\n\r\n    useEffect(() => {\r\n        Axios.get(`${taskstagesUrl}public/`)\r\n            .then(res => res.data)\r\n            .then(res => setStages(res))\r\n    }, [chainId])\r\n\r\n    // useEffect(() => {\r\n    //     console.log(formStageId)\r\n    //     if (formStageId && stages.length > 0) {\r\n    //         const stage = stages.filter((item: any) => item.id == formStageId)[0] as any\r\n    //         console.log(stage)\r\n    //         if (stage) {\r\n    //             const schema = stage.json_schema ? JSON.parse(stage.json_schema) : {}\r\n    //             const ui = stage.ui_schema ? JSON.parse(stage.ui_schema) : {}\r\n    //             setJsonSchema(schema)\r\n    //             setUiSchema(ui)\r\n    //             const savedResponses = localStorage.getItem(\"selectable_filter_responses\");\r\n    //             if (savedResponses) {\r\n    //                 setFormResponses(JSON.parse(savedResponses))\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [formStageId])\r\n\r\n\r\n    // const handleChainChange = (event: SelectChangeEvent) => {\r\n    //     setChainId(event.target.value);\r\n    //     setStageId(\"\")\r\n    //     setFormStageId(\"\");\r\n    //     setFormResponses({})\r\n    //     setJsonSchema({})\r\n    //     setUiSchema({})\r\n    //     localStorage.setItem(\"selectable_filter_chain\", event.target.value);\r\n    //     localStorage.setItem(\"selectable_filter_stage\", \"\");\r\n    //     localStorage.setItem(\"selectable_filter_form_stage\", \"\");\r\n    //     localStorage.setItem(\"selectable_filter_responses\", JSON.stringify({}));\r\n    // };\r\n\r\n    const handleStageChange = (event: SelectChangeEvent) => {\r\n        setStageId(event.target.value)\r\n    }\r\n\r\n    // const handleFormStageChange = (event: SelectChangeEvent) => {\r\n    //     setFormStageId(event.target.value);\r\n    //     setFormResponses({})\r\n    //     setJsonSchema({})\r\n    //     setUiSchema({})\r\n    //     localStorage.setItem(\"selectable_filter_form_stage\", event.target.value);\r\n    //     localStorage.setItem(\"selectable_filter_responses\", JSON.stringify({}));\r\n    // };\r\n\r\n    // const handleFormChange = (e: { formData: object }) => {\r\n    //     setFormResponses(e.formData)\r\n    //     localStorage.setItem(\"selectable_filter_responses\", JSON.stringify(e.formData));\r\n    // }\r\n\r\n    const handleFormSubmit = () => {\r\n        // const query = formStageId ? JSON.stringify({stage: formStageId, responses: formResponses}) : \"\"\r\n        const query = searchValue\r\n        onFilter(query, stageId)\r\n    };\r\n\r\n    const handleSearchValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <FormGroup>\r\n            <Box sx={{m: 1, minWidth: 120}}>\r\n                <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"Поиск\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    onChange={handleSearchValueChange}/>\r\n            </Box>\r\n            {/*<FormControl sx={{m: 1, minWidth: 120}}>*/}\r\n            {/*    <InputLabel id=\"select-chain-filter\">Chain</InputLabel>*/}\r\n            {/*    <Select*/}\r\n            {/*        labelId=\"select-chain-label\"*/}\r\n            {/*        id=\"select-chain\"*/}\r\n            {/*        value={chainId}*/}\r\n            {/*        label=\"Chain\"*/}\r\n            {/*        onChange={handleChainChange}*/}\r\n            {/*    >*/}\r\n            {/*        <MenuItem value=\"\">*/}\r\n            {/*            <em>None</em>*/}\r\n            {/*        </MenuItem>*/}\r\n            {/*        {chains.map((item: any) => <MenuItem key={`filter_chain_${item.id}`}*/}\r\n            {/*                                             value={item.id}>{item.name}</MenuItem>)}*/}\r\n            {/*    </Select>*/}\r\n            {/*</FormControl>*/}\r\n            <FormControl sx={{m: 1, minWidth: 120}}>\r\n                <InputLabel id=\"select-stage-filter\">Форма</InputLabel>\r\n                <Select\r\n                    labelId=\"select-stage-label\"\r\n                    id=\"select-stage\"\r\n                    value={stageId}\r\n                    label=\"Форма\"\r\n                    onChange={handleStageChange}\r\n                >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    {stages.map((item: any) => <MenuItem key={`filter_stage_${item.id}`}\r\n                                                         value={item.id}>{item.name}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n            {/*<FormControl disabled={chainId === \"\"} sx={{m: 1, minWidth: 120}}>*/}\r\n            {/*    <InputLabel id=\"select-form-stage-filter\">Form Stage</InputLabel>*/}\r\n            {/*    <Select*/}\r\n            {/*        labelId=\"select-stage-label\"*/}\r\n            {/*        id=\"select-stage\"*/}\r\n            {/*        value={formStageId}*/}\r\n            {/*        label=\"Form Stage\"*/}\r\n            {/*        onChange={handleFormStageChange}*/}\r\n            {/*    >*/}\r\n            {/*        <MenuItem value=\"\">*/}\r\n            {/*            <em>None</em>*/}\r\n            {/*        </MenuItem>*/}\r\n            {/*        {stages.map((item: any) => <MenuItem key={`filter_form_stage_${item.id}`}*/}\r\n            {/*                                             value={item.id}>{item.name}</MenuItem>)}*/}\r\n            {/*    </Select>*/}\r\n            {/*</FormControl>*/}\r\n            {/*<Box sx={{m: 1, minWidth: 120}}>*/}\r\n            {/*    <Form*/}\r\n            {/*        schema={jsonSchema}*/}\r\n            {/*        uiSchema={uiSchema}*/}\r\n            {/*        widgets={widgets}*/}\r\n            {/*        formData={formResponses}*/}\r\n            {/*        children={\" \"}*/}\r\n            {/*        onChange={handleFormChange}*/}\r\n            {/*        onSubmit={handleFormSubmit}*/}\r\n            {/*    />*/}\r\n            {/*</Box>*/}\r\n            <Button sx={{mx: 1, mb: 2}} variant={\"contained\"} onClick={handleFormSubmit}>Поиск</Button>\r\n        </FormGroup>\r\n    );\r\n};\r\n\r\nexport default TaskFilter","import React, {useEffect, useState} from \"react\";\r\nimport TaskList from \"./TaskList\";\r\nimport {Box, Grid, Pagination} from \"@mui/material\";\r\nimport {getSelectableTasks, paginatedDataHandler} from \"../../util/Util\";\r\nimport TaskFilter from \"./TaskFilter\";\r\n\r\n\r\ntype RouterParams = { campaignId: string }\r\n\r\nconst TaskMenu = (props: any) => {\r\n    const [selectableTasks, setSelectableTasks] = useState([])\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [page, setPage] = React.useState(1);\r\n    const [filterData, setFilterData] = useState<object | null>(null)\r\n\r\n    const campaignId = \"4\"\r\n\r\n    const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        setPage(value);\r\n        if (value) {\r\n            getSelectableTasks(campaignId, value, filterData).then(res => paginatedDataHandler(res, setSelectableTasks, setTotalPages))\r\n        }\r\n    };\r\n\r\n    const refreshTasks = () => {\r\n        getSelectableTasks(campaignId,1, filterData).then(res => paginatedDataHandler(res, setSelectableTasks, setTotalPages))\r\n    };\r\n\r\n    const getFilter = (query?: string, stage?: string) => {\r\n        console.log(query, stage)\r\n        const filter = query || stage ? {query: query, stage: stage} : null\r\n        getSelectableTasks(campaignId,1, filter).then(res => {\r\n            if (res.count > 0) {\r\n                setFilterData(filter)\r\n                setPage(1)\r\n                paginatedDataHandler(res, setSelectableTasks, setTotalPages)\r\n            } else {\r\n                setFilterData(null)\r\n                alert(\"Нет похожих тасков\")\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshTasks()\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Grid sx={{width: '70%', minWidth: '400px', margin: '0 auto', display: 'block'}}>\r\n            <Box pb={2}>\r\n                <TaskFilter campaign={campaignId} onFilter={getFilter}/>\r\n            </Box>\r\n            <TaskList selectable={true} tasks={selectableTasks} refreshTasks={refreshTasks}/>\r\n            <Box pb={2} display={\"flex\"} justifyContent={\"center\"}>\r\n                <Pagination count={totalPages} page={page} onChange={handlePageChange} showFirstButton\r\n                            showLastButton/>\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default TaskMenu","import React from 'react';\nimport './App.css';\nimport TaskMenu from \"./components/tasks/TaskMenu\";\n\nconst App = () => {\n\n\n\n    return (\n        <div>\n            <TaskMenu/>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}